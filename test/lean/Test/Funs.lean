-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [test]: function definitions
import Base
import Test.Types
open Primitives

namespace test

/- [test::arithmetics::N] -/
def arithmetics_n_body : Result Usize := Result.ret (Usize.ofInt 4)
def arithmetics_n_c : Usize := eval_global arithmetics_n_body (by simp)

/- [test::arithmetics::default]: forward function -/
def arithmetics.default : Result arithmetics.BigInt :=
  Result.ret
  {
    num :=
      (Array.make U64 (Usize.ofInt 4) [
        (U64.ofInt 0), (U64.ofInt 0), (U64.ofInt 0), (U64.ofInt 0)
        ])
  }

/- [test::arithmetics::adc_for_add_with_carry]: forward function -/
def arithmetics.adc_for_add_with_carry
  (a : U64) (b : U64) (carry : U8) : Result U8 :=
  do
    let i ← Scalar.cast .U128 a
    let i0 ← Scalar.cast .U128 b
    let i1 ← i + i0
    let i2 ← Scalar.cast .U128 carry
    let tmp ← i1 + i2
    let _ ← Scalar.cast .U64 tmp
    let i3 ← (U128.ofInt 1024) * (U128.ofInt 1024)
    let i4 ← i3 * (U128.ofInt 1024)
    let i5 ← i4 * (U128.ofInt 1024)
    let i6 ← i5 * (U128.ofInt 1024)
    let i7 ← i6 * (U128.ofInt 1024)
    let shift ← i7 * (U128.ofInt 16)
    let i8 ← tmp / shift
    Scalar.cast .U8 i8

/- [test::arithmetics::adc_for_add_with_carry]: backward function 0 -/
def arithmetics.adc_for_add_with_carry_back
  (a : U64) (b : U64) (carry : U8) : Result U64 :=
  do
    let i ← Scalar.cast .U128 a
    let i0 ← Scalar.cast .U128 b
    let i1 ← i + i0
    let i2 ← Scalar.cast .U128 carry
    let tmp ← i1 + i2
    let a0 ← Scalar.cast .U64 tmp
    let i3 ← (U128.ofInt 1024) * (U128.ofInt 1024)
    let i4 ← i3 * (U128.ofInt 1024)
    let i5 ← i4 * (U128.ofInt 1024)
    let i6 ← i5 * (U128.ofInt 1024)
    let i7 ← i6 * (U128.ofInt 1024)
    let shift ← i7 * (U128.ofInt 16)
    let i8 ← tmp / shift
    let _ ← Scalar.cast .U8 i8
    Result.ret a0

/- [test::arithmetics::add_with_carry]: forward function -/
def arithmetics.add_with_carry
  (sself : arithmetics.BigInt) (other : arithmetics.BigInt) : Result Bool :=
  if arithmetics_n_c >= (Usize.ofInt 1)
  then
    do
      let i ← Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 0)
      let i0 ←
        Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 0)
      let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
      if arithmetics_n_c >= (Usize.ofInt 2)
      then
        do
          let i1 ← arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
          let a ←
            Array.index_mut_back U64 (Usize.ofInt 4) sself.num (Usize.ofInt 0)
              i1
          let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 1)
          let i3 ←
            Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 1)
          let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
          if arithmetics_n_c >= (Usize.ofInt 3)
          then
            do
              let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
              let a0 ←
                Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1) i4
              let i5 ← Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 2)
              let i6 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 2)
              let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
              if arithmetics_n_c >= (Usize.ofInt 4)
              then
                do
                  let i7 ←
                    arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                  let a1 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a0 (Usize.ofInt 2)
                      i7
                  let i8 ←
                    Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 3)
                  let i9 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 3)
                  let carry2 ←
                    arithmetics.adc_for_add_with_carry i8 i9 carry1
                  if arithmetics_n_c >= (Usize.ofInt 5)
                  then
                    do
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 3) i10
                      let i11 ←
                        Array.index_mut U64 (Usize.ofInt 4) a2 (Usize.ofInt 4)
                      let i12 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 4)
                      let carry3 ←
                        arithmetics.adc_for_add_with_carry i11 i12 carry2
                      if arithmetics_n_c >= (Usize.ofInt 6)
                      then
                        do
                          let i13 ←
                            arithmetics.adc_for_add_with_carry_back i11 i12
                              carry2
                          let a3 ←
                            Array.index_mut_back U64 (Usize.ofInt 4) a2
                              (Usize.ofInt 4) i13
                          let i14 ←
                            Array.index_mut U64 (Usize.ofInt 4) a3
                              (Usize.ofInt 5)
                          let i15 ←
                            Array.index_shared U64 (Usize.ofInt 4) other.num
                              (Usize.ofInt 5)
                          let carry4 ←
                            arithmetics.adc_for_add_with_carry i14 i15 carry3
                          Result.ret (carry4 != (U8.ofInt 0))
                      else Result.ret (carry3 != (U8.ofInt 0))
                  else
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 3) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let carry3 ←
                          arithmetics.adc_for_add_with_carry i11 i12 carry2
                        Result.ret (carry3 != (U8.ofInt 0))
                    else Result.ret (carry2 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 2) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let carry3 ←
                          arithmetics.adc_for_add_with_carry i11 i12 carry2
                        Result.ret (carry3 != (U8.ofInt 0))
                    else Result.ret (carry2 != (U8.ofInt 0))
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 2) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
          else
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let carry3 ←
                          arithmetics.adc_for_add_with_carry i11 i12 carry2
                        Result.ret (carry3 != (U8.ofInt 0))
                    else Result.ret (carry2 != (U8.ofInt 0))
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 1) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
      else
        if arithmetics_n_c >= (Usize.ofInt 3)
        then
          do
            let i1 ←
              arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
            let a ←
              Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                (Usize.ofInt 0) i1
            let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 2)
            let i3 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
            let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let carry3 ←
                          arithmetics.adc_for_add_with_carry i11 i12 carry2
                        Result.ret (carry3 != (U8.ofInt 0))
                    else Result.ret (carry2 != (U8.ofInt 0))
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
        else
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 0) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 0) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 0) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                  Result.ret (carry0 != (U8.ofInt 0))
              else Result.ret (carry != (U8.ofInt 0))
  else
    if arithmetics_n_c >= (Usize.ofInt 2)
    then
      do
        let i ← Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 1)
        let i0 ←
          Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 1)
        let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
        if arithmetics_n_c >= (Usize.ofInt 3)
        then
          do
            let i1 ←
              arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
            let a ←
              Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                (Usize.ofInt 1) i1
            let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 2)
            let i3 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
            let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let carry3 ←
                          arithmetics.adc_for_add_with_carry i11 i12 carry2
                        Result.ret (carry3 != (U8.ofInt 0))
                    else Result.ret (carry2 != (U8.ofInt 0))
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
        else
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 1) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 1) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 1) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                  Result.ret (carry0 != (U8.ofInt 0))
              else Result.ret (carry != (U8.ofInt 0))
    else
      if arithmetics_n_c >= (Usize.ofInt 3)
      then
        do
          let i ←
            Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 2)
          let i0 ←
            Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
          let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 2) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let carry2 ←
                        arithmetics.adc_for_add_with_carry i8 i9 carry1
                      Result.ret (carry2 != (U8.ofInt 0))
                  else Result.ret (carry1 != (U8.ofInt 0))
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 2) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 2) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                  Result.ret (carry0 != (U8.ofInt 0))
              else Result.ret (carry != (U8.ofInt 0))
      else
        if arithmetics_n_c >= (Usize.ofInt 4)
        then
          do
            let i ←
              Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 3)
            let i0 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 3)
            let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 3) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let carry1 ←
                      arithmetics.adc_for_add_with_carry i5 i6 carry0
                    Result.ret (carry1 != (U8.ofInt 0))
                else Result.ret (carry0 != (U8.ofInt 0))
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 3) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                  Result.ret (carry0 != (U8.ofInt 0))
              else Result.ret (carry != (U8.ofInt 0))
        else
          if arithmetics_n_c >= (Usize.ofInt 5)
          then
            do
              let i ←
                Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 4)
              let i0 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 4)
              let carry ←
                arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 4) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                  Result.ret (carry0 != (U8.ofInt 0))
              else Result.ret (carry != (U8.ofInt 0))
          else
            if arithmetics_n_c >= (Usize.ofInt 6)
            then
              do
                let i ←
                  Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 5)
                let i0 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 5)
                let carry ←
                  arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
                Result.ret (carry != (U8.ofInt 0))
            else Result.ret ((U8.ofInt 0) != (U8.ofInt 0))

/- [test::arithmetics::add_with_carry]: backward function 0 -/
def arithmetics.add_with_carry_back
  (sself : arithmetics.BigInt) (other : arithmetics.BigInt) :
  Result arithmetics.BigInt
  :=
  if arithmetics_n_c >= (Usize.ofInt 1)
  then
    do
      let i ← Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 0)
      let i0 ←
        Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 0)
      let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
      if arithmetics_n_c >= (Usize.ofInt 2)
      then
        do
          let i1 ← arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
          let a ←
            Array.index_mut_back U64 (Usize.ofInt 4) sself.num (Usize.ofInt 0)
              i1
          let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 1)
          let i3 ←
            Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 1)
          let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
          if arithmetics_n_c >= (Usize.ofInt 3)
          then
            do
              let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
              let a0 ←
                Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1) i4
              let i5 ← Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 2)
              let i6 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 2)
              let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
              if arithmetics_n_c >= (Usize.ofInt 4)
              then
                do
                  let i7 ←
                    arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                  let a1 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a0 (Usize.ofInt 2)
                      i7
                  let i8 ←
                    Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 3)
                  let i9 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 3)
                  let carry2 ←
                    arithmetics.adc_for_add_with_carry i8 i9 carry1
                  if arithmetics_n_c >= (Usize.ofInt 5)
                  then
                    do
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 3) i10
                      let i11 ←
                        Array.index_mut U64 (Usize.ofInt 4) a2 (Usize.ofInt 4)
                      let i12 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 4)
                      let carry3 ←
                        arithmetics.adc_for_add_with_carry i11 i12 carry2
                      if arithmetics_n_c >= (Usize.ofInt 6)
                      then
                        do
                          let i13 ←
                            arithmetics.adc_for_add_with_carry_back i11 i12
                              carry2
                          let a3 ←
                            Array.index_mut_back U64 (Usize.ofInt 4) a2
                              (Usize.ofInt 4) i13
                          let i14 ←
                            Array.index_mut U64 (Usize.ofInt 4) a3
                              (Usize.ofInt 5)
                          let i15 ←
                            Array.index_shared U64 (Usize.ofInt 4) other.num
                              (Usize.ofInt 5)
                          let i16 ←
                            arithmetics.adc_for_add_with_carry_back i14 i15
                              carry3
                          let a4 ←
                            Array.index_mut_back U64 (Usize.ofInt 4) a3
                              (Usize.ofInt 5) i16
                          Result.ret { num := a4 }
                      else
                        do
                          let i13 ←
                            arithmetics.adc_for_add_with_carry_back i11 i12
                              carry2
                          let a3 ←
                            Array.index_mut_back U64 (Usize.ofInt 4) a2
                              (Usize.ofInt 4) i13
                          Result.ret { num := a3 }
                  else
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 3) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let i13 ←
                          arithmetics.adc_for_add_with_carry_back i11 i12
                            carry2
                        let a3 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5) i13
                        Result.ret { num := a3 }
                    else
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 3) i10
                        Result.ret { num := a2 }
              else
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 2) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let i13 ←
                          arithmetics.adc_for_add_with_carry_back i11 i12
                            carry2
                        let a3 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5) i13
                        Result.ret { num := a3 }
                    else
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        Result.ret { num := a2 }
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 2) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 2) i7
                      Result.ret { num := a1 }
          else
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let i13 ←
                          arithmetics.adc_for_add_with_carry_back i11 i12
                            carry2
                        let a3 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5) i13
                        Result.ret { num := a3 }
                    else
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        Result.ret { num := a2 }
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      Result.ret { num := a1 }
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 1)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 1) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 1) i4
                    Result.ret { num := a0 }
      else
        if arithmetics_n_c >= (Usize.ofInt 3)
        then
          do
            let i1 ←
              arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
            let a ←
              Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                (Usize.ofInt 0) i1
            let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 2)
            let i3 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
            let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let i13 ←
                          arithmetics.adc_for_add_with_carry_back i11 i12
                            carry2
                        let a3 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5) i13
                        Result.ret { num := a3 }
                    else
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        Result.ret { num := a2 }
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      Result.ret { num := a1 }
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    Result.ret { num := a0 }
        else
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 0) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    Result.ret { num := a0 }
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 0) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    Result.ret { num := a0 }
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 0) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                      i4
                  Result.ret { num := a0 }
              else
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 0) i1
                  Result.ret { num := a }
  else
    if arithmetics_n_c >= (Usize.ofInt 2)
    then
      do
        let i ← Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 1)
        let i0 ←
          Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 1)
        let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
        if arithmetics_n_c >= (Usize.ofInt 3)
        then
          do
            let i1 ←
              arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
            let a ←
              Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                (Usize.ofInt 1) i1
            let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 2)
            let i3 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
            let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
            if arithmetics_n_c >= (Usize.ofInt 4)
            then
              do
                let i4 ← arithmetics.adc_for_add_with_carry_back i2 i3 carry
                let a0 ←
                  Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2) i4
                let i5 ←
                  Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 3)
                let i6 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 3)
                let carry1 ← arithmetics.adc_for_add_with_carry i5 i6 carry0
                if arithmetics_n_c >= (Usize.ofInt 5)
                then
                  do
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 3) i7
                    let i8 ←
                      Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 4)
                    let i9 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 4)
                    let carry2 ←
                      arithmetics.adc_for_add_with_carry i8 i9 carry1
                    if arithmetics_n_c >= (Usize.ofInt 6)
                    then
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        let i11 ←
                          Array.index_mut U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5)
                        let i12 ←
                          Array.index_shared U64 (Usize.ofInt 4) other.num
                            (Usize.ofInt 5)
                        let i13 ←
                          arithmetics.adc_for_add_with_carry_back i11 i12
                            carry2
                        let a3 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a2
                            (Usize.ofInt 5) i13
                        Result.ret { num := a3 }
                    else
                      do
                        let i10 ←
                          arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                        let a2 ←
                          Array.index_mut_back U64 (Usize.ofInt 4) a1
                            (Usize.ofInt 4) i10
                        Result.ret { num := a2 }
                else
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 3) i7
                      Result.ret { num := a1 }
            else
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 2)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 2) i4
                    Result.ret { num := a0 }
        else
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 1) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    Result.ret { num := a0 }
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 1) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    Result.ret { num := a0 }
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 1) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                      i4
                  Result.ret { num := a0 }
              else
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 1) i1
                  Result.ret { num := a }
    else
      if arithmetics_n_c >= (Usize.ofInt 3)
      then
        do
          let i ←
            Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 2)
          let i0 ←
            Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 2)
          let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
          if arithmetics_n_c >= (Usize.ofInt 4)
          then
            do
              let i1 ←
                arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
              let a ←
                Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                  (Usize.ofInt 2) i1
              let i2 ← Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 3)
              let i3 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 3)
              let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
              if arithmetics_n_c >= (Usize.ofInt 5)
              then
                do
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 3)
                      i4
                  let i5 ←
                    Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 4)
                  let i6 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 4)
                  let carry1 ←
                    arithmetics.adc_for_add_with_carry i5 i6 carry0
                  if arithmetics_n_c >= (Usize.ofInt 6)
                  then
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      let i8 ←
                        Array.index_mut U64 (Usize.ofInt 4) a1 (Usize.ofInt 5)
                      let i9 ←
                        Array.index_shared U64 (Usize.ofInt 4) other.num
                          (Usize.ofInt 5)
                      let i10 ←
                        arithmetics.adc_for_add_with_carry_back i8 i9 carry1
                      let a2 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a1
                          (Usize.ofInt 5) i10
                      Result.ret { num := a2 }
                  else
                    do
                      let i7 ←
                        arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                      let a1 ←
                        Array.index_mut_back U64 (Usize.ofInt 4) a0
                          (Usize.ofInt 4) i7
                      Result.ret { num := a1 }
              else
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 3) i4
                    Result.ret { num := a0 }
          else
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 2) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    Result.ret { num := a0 }
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 2) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                      i4
                  Result.ret { num := a0 }
              else
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 2) i1
                  Result.ret { num := a }
      else
        if arithmetics_n_c >= (Usize.ofInt 4)
        then
          do
            let i ←
              Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 3)
            let i0 ←
              Array.index_shared U64 (Usize.ofInt 4) other.num (Usize.ofInt 3)
            let carry ← arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
            if arithmetics_n_c >= (Usize.ofInt 5)
            then
              do
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 3) i1
                let i2 ←
                  Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 4)
                let i3 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 4)
                let carry0 ← arithmetics.adc_for_add_with_carry i2 i3 carry
                if arithmetics_n_c >= (Usize.ofInt 6)
                then
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    let i5 ←
                      Array.index_mut U64 (Usize.ofInt 4) a0 (Usize.ofInt 5)
                    let i6 ←
                      Array.index_shared U64 (Usize.ofInt 4) other.num
                        (Usize.ofInt 5)
                    let i7 ←
                      arithmetics.adc_for_add_with_carry_back i5 i6 carry0
                    let a1 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a0
                        (Usize.ofInt 5) i7
                    Result.ret { num := a1 }
                else
                  do
                    let i4 ←
                      arithmetics.adc_for_add_with_carry_back i2 i3 carry
                    let a0 ←
                      Array.index_mut_back U64 (Usize.ofInt 4) a
                        (Usize.ofInt 4) i4
                    Result.ret { num := a0 }
            else
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 3) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                      i4
                  Result.ret { num := a0 }
              else
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 3) i1
                  Result.ret { num := a }
        else
          if arithmetics_n_c >= (Usize.ofInt 5)
          then
            do
              let i ←
                Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 4)
              let i0 ←
                Array.index_shared U64 (Usize.ofInt 4) other.num
                  (Usize.ofInt 4)
              let carry ←
                arithmetics.adc_for_add_with_carry i i0 (U8.ofInt 0)
              if arithmetics_n_c >= (Usize.ofInt 6)
              then
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 4) i1
                  let i2 ←
                    Array.index_mut U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                  let i3 ←
                    Array.index_shared U64 (Usize.ofInt 4) other.num
                      (Usize.ofInt 5)
                  let i4 ←
                    arithmetics.adc_for_add_with_carry_back i2 i3 carry
                  let a0 ←
                    Array.index_mut_back U64 (Usize.ofInt 4) a (Usize.ofInt 5)
                      i4
                  Result.ret { num := a0 }
              else
                do
                  let i1 ←
                    arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                  let a ←
                    Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                      (Usize.ofInt 4) i1
                  Result.ret { num := a }
          else
            if arithmetics_n_c >= (Usize.ofInt 6)
            then
              do
                let i ←
                  Array.index_mut U64 (Usize.ofInt 4) sself.num (Usize.ofInt 5)
                let i0 ←
                  Array.index_shared U64 (Usize.ofInt 4) other.num
                    (Usize.ofInt 5)
                let i1 ←
                  arithmetics.adc_for_add_with_carry_back i i0 (U8.ofInt 0)
                let a ←
                  Array.index_mut_back U64 (Usize.ofInt 4) sself.num
                    (Usize.ofInt 5) i1
                Result.ret { num := a }
            else Result.ret sself

end test
